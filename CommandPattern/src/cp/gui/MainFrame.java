package cp.gui;

import cp.command.Command;
import cp.command.IncrementCommand;
import cp.command.ResetCommand;
import cp.command.UndoRedo;
import cp.model.Counter;
import java.util.Stack;

/**
 * Main frame (window) of the example application
 * for the Command Design Pattern.
 * It holds both the view and the controller.
 * To keep the code simple, the view and controller are tightly integrated,
 * and the controller tells the view to pull an up-to-date state from the model.
 * The availability of the Undo button and operation
 * is controlled by the constant {@code UNDO}.
 *
 * @author Tom Verhoeff (TU/e)
<!--//# BEGIN TODO Name, id, and date-->
<p><font color="red"><b>Bogdan Floris, 0935036, 27.04.2007</b></font></p>
<!--//# END TODO-->
// -----8<----- cut line -----8<-----
 */
public class MainFrame extends javax.swing.JFrame {

    /** Creates new form MainFrame. */
    public MainFrame() {
        initComponents();
        initFrame();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelView = new javax.swing.JPanel();
        jLabelCount = new javax.swing.JLabel();
        jTextFieldCount = new javax.swing.JTextField();
        jPanelController = new javax.swing.JPanel();
        jButtonIncrement = new javax.swing.JButton();
        jButtonUndo = new javax.swing.JButton();
        jButtonRedo = new javax.swing.JButton();
        jButtonUndoAll = new javax.swing.JButton();
        jButtonRedoAll = new javax.swing.JButton();
        jButtonReset = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Command Pattern for Undo");

        jPanelView.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelView.setToolTipText("View");

        jLabelCount.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabelCount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelCount.setText("Count");

        jTextFieldCount.setEditable(false);
        jTextFieldCount.setColumns(2);
        jTextFieldCount.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jTextFieldCount.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldCount.setText("0");
        jTextFieldCount.setToolTipText("The current count");

        org.jdesktop.layout.GroupLayout jPanelViewLayout = new org.jdesktop.layout.GroupLayout(jPanelView);
        jPanelView.setLayout(jPanelViewLayout);
        jPanelViewLayout.setHorizontalGroup(
            jPanelViewLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelViewLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanelViewLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabelCount, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                    .add(jTextFieldCount, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelViewLayout.setVerticalGroup(
            jPanelViewLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelViewLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabelCount)
                .add(18, 18, 18)
                .add(jTextFieldCount, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelController.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelController.setToolTipText("Controller");

        jButtonIncrement.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jButtonIncrement.setText("Incr.");
        jButtonIncrement.setToolTipText("Increments count by one");
        jButtonIncrement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonIncrementActionPerformed(evt);
            }
        });

        jButtonUndo.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jButtonUndo.setText("Undo");
        jButtonUndo.setToolTipText("Undoes the last command");
        jButtonUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUndoActionPerformed(evt);
            }
        });

        jButtonRedo.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jButtonRedo.setText("Redo");
        jButtonRedo.setToolTipText("Redoes the last undone command");
        jButtonRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRedoActionPerformed(evt);
            }
        });

        jButtonUndoAll.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jButtonUndoAll.setText("UndoAll");
        jButtonUndoAll.setToolTipText("Undoes all commands");
        jButtonUndoAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUndoAllActionPerformed(evt);
            }
        });

        jButtonRedoAll.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jButtonRedoAll.setText("RedoAll");
        jButtonRedoAll.setToolTipText("Redoes all undone commands");
        jButtonRedoAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRedoAllActionPerformed(evt);
            }
        });

        jButtonReset.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jButtonReset.setText("Reset");
        jButtonReset.setToolTipText("Reset the counter");
        jButtonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanelControllerLayout = new org.jdesktop.layout.GroupLayout(jPanelController);
        jPanelController.setLayout(jPanelControllerLayout);
        jPanelControllerLayout.setHorizontalGroup(
            jPanelControllerLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelControllerLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanelControllerLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jButtonIncrement, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jButtonUndoAll, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jButtonRedo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jButtonUndo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jButtonRedoAll, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jButtonReset, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelControllerLayout.setVerticalGroup(
            jPanelControllerLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelControllerLayout.createSequentialGroup()
                .addContainerGap()
                .add(jButtonIncrement)
                .add(12, 12, 12)
                .add(jButtonReset)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jButtonUndo)
                .add(18, 18, 18)
                .add(jButtonRedo)
                .add(18, 18, 18)
                .add(jButtonUndoAll)
                .add(18, 18, 18)
                .add(jButtonRedoAll)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanelView, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelController, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanelController, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanelView, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonIncrementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonIncrementActionPerformed
        if (! UNDO) {
            counter.increment();
        } else {
            final Command command = new IncrementCommand(counter);
            //command.execute();
            undoRedo.did(command);
        }
        updateFrame();
    }//GEN-LAST:event_jButtonIncrementActionPerformed

    private void jButtonUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUndoActionPerformed
        if (UNDO) {
            assert undoRedo.canUndo(): "Undo: undo stack is empty";
            undoRedo.undo(true);
        }
        updateFrame();
    }//GEN-LAST:event_jButtonUndoActionPerformed

    private void jButtonRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRedoActionPerformed
        if (UNDO) {
            assert undoRedo.canRedo(): "Redo: redo stack is empty";
            undoRedo.redo();
        }
        updateFrame();
    }//GEN-LAST:event_jButtonRedoActionPerformed

    private void jButtonUndoAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUndoAllActionPerformed
        if (UNDO) {
            assert undoRedo.canUndo(): "UndoAll: undo stack is empty";
            undoRedo.undoAll(true);
        }
        updateFrame();
    }//GEN-LAST:event_jButtonUndoAllActionPerformed

    private void jButtonRedoAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRedoAllActionPerformed
        if (UNDO) {
            assert undoRedo.canRedo(): "RedoAll: redo stack is empty";
            undoRedo.redoAll();
        }
        updateFrame();
    }//GEN-LAST:event_jButtonRedoAllActionPerformed

    private void jButtonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetActionPerformed
        if (! UNDO) {
            counter.reset();
        } else {
            final Command command = new ResetCommand(counter);
            //command.execute();
            undoRedo.did(command);
        }
        updateFrame();
    }//GEN-LAST:event_jButtonResetActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonIncrement;
    private javax.swing.JButton jButtonRedo;
    private javax.swing.JButton jButtonRedoAll;
    private javax.swing.JButton jButtonReset;
    private javax.swing.JButton jButtonUndo;
    private javax.swing.JButton jButtonUndoAll;
    private javax.swing.JLabel jLabelCount;
    private javax.swing.JPanel jPanelController;
    private javax.swing.JPanel jPanelView;
    private javax.swing.JTextField jTextFieldCount;
    // End of variables declaration//GEN-END:variables

    /** Whether to provide Undo. */
    public static final boolean UNDO = true;

    /** The counter (model). */
    private Counter counter;

    /** The undo stack. */
    private UndoRedo undoRedo;

    /** Initializes this frame. */
    private void initFrame() {
        counter = new Counter();
        undoRedo = new UndoRedo();
        updateFrame();
    }

    /** Updates this frame, both controller and view. */
    private void updateFrame() {
        if (! UNDO) {
            jButtonUndo.setEnabled(false);
            jButtonRedo.setEnabled(false);
            jButtonUndoAll.setEnabled(false);
            jButtonRedoAll.setEnabled(false);
            //jButtonUndo.setVisible(false);
            jButtonUndo.setToolTipText(
                    "To enable Undo, recompile with UNDO = true");
        } else {
            if (!undoRedo.canUndo()) {
                jButtonUndo.setToolTipText("Nothing to undo");
                jButtonUndoAll.setToolTipText("Nothing to undo");
            } else {
                jButtonUndo.setToolTipText("Undo last command");
                jButtonUndoAll.setToolTipText("Undo all commands");
            }
            jButtonUndo.setEnabled(undoRedo.canUndo());
            jButtonUndoAll.setEnabled(undoRedo.canUndo());
            if (!undoRedo.canRedo()) {
                jButtonRedo.setToolTipText("Nothing to redo");
                jButtonRedoAll.setToolTipText("Nothing to redo");
            } else {
                jButtonRedo.setToolTipText("Redo last undo commands of");
                jButtonRedoAll.setToolTipText("Redo all undone commands");
            }
            jButtonRedo.setEnabled(undoRedo.canRedo());
            jButtonRedoAll.setEnabled(undoRedo.canRedo());
        }
        jTextFieldCount.setText("" + counter.getCount());
    }

}
