//# BEGIN SKELETON
package kpa.reasoning;

import kpa.command.CompoundCommand;
import kpa.model.KPuzzle;

/**
 * A reasoner that repeatedly applies a given reasoner
 * until the least fixed point is reached (a closure operation).
 * That is, the reasoner is repeated until either there is no further change,
 * or until an invalid state is reached,
 * in which case all previous changes are reverted.
 *
 * @author Tom Verhoeff (Eindhoven University of Technology)
<!--//# BEGIN TODO Name, id, and date-->
<p><font color="red"><b>Bogdan Floris, 0935036, 2.04.2017</b></font></p>
<!--//# END TODO-->
*/
public class FixpointReasoner extends ReasonerDecorator {

    public FixpointReasoner(KPuzzle puzzle, Reasoner reasoner) {
        super(puzzle, reasoner);
    }

    @Override
    public CompoundCommand apply() {
        final CompoundCommand result = super.apply();

//# BEGIN TODO repeatedly apply reasoner until no change occurs
        
//# END TODO

        return result;
    }

}
//# END SKELETON
